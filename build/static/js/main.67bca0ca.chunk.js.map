{"version":3,"sources":["Components/ToDoItem.js","Components/TodoList.js","Components/Header.js","Components/AddToDo.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","state","work","isComplete","bind","CompleteWork","complete","RemoveWork","remove","this","textDecoration","preProps","setState","todoInfo","className","type","onChange","_id","style","title","descript","onClick","Component","TodoList","data","map","todo","key","Header","to","AddToDo","HandleNewWork","e","target","name","value","AddNewTodo","preventDefault","newtodo","onSubmit","id","placeholder","About","Fragment","App","a","todos","serverURL","Axios","get","response","console","log","json","filter","uuidv4","exact","path","render","component","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.67bca0ca.chunk.js","sourcesContent":["import React,{ Component} from 'react';\r\nimport '../App.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass TodoItem extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = props.work;\r\n        this.isComplete = this.isComplete.bind(this);\r\n        this.CompleteWork = props.complete;\r\n        this.RemoveWork = props.remove;\r\n    }\r\n\r\n    isComplete()\r\n    {\r\n        if (this.state.complete)\r\n        {\r\n            return {textDecoration: \"line-through\"};\r\n        }\r\n        return {textDecoration: \"none\"};\r\n    }\r\n\r\n    componentDidUpdate(preProps)\r\n    {\r\n        if (this.props.work !== preProps.work)\r\n        {\r\n            this.setState({\r\n                work: this.props.work,\r\n            })\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const todoInfo = this.state;\r\n        return (<div className=\"todo-item\" >\r\n                <input type=\"checkbox\" onChange={() =>{this.CompleteWork(todoInfo._id)}}></input>\r\n                <div className=\"todo-info\">\r\n                    <h5 style={this.isComplete()}>{todoInfo.title}</h5>\r\n                    <p style={this.isComplete()}>{todoInfo.descript} </p>\r\n                </div>\r\n                \r\n                <button className=\"remove-btn\" onClick={() =>{this.RemoveWork(todoInfo._id)}}>x</button>\r\n            \r\n        </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nTodoItem.propTypes ={\r\n    work:   PropTypes.object.isRequired,\r\n    complete:  PropTypes.func.isRequired,\r\n    remove:  PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TodoItem;","import React,{ Component } from 'react';\r\nimport TodoItem from './ToDoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoList extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n         super(props);\r\n         this.state = props.data;\r\n    }\r\n\r\n    componentDidUpdate(preProps)\r\n    {   \r\n        if (this.props.data !== preProps.data)\r\n        {\r\n            this.setState(this.props.data);\r\n            \r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const todoList = this.state['todos'];\r\n        return todoList.map(todo => {\r\n            return <TodoItem key={todo._id} work={todo} complete={this.props.complete} remove={this.props.remove}></TodoItem>;\r\n        })\r\n    }\r\n}\r\n\r\nTodoList.propTypes = {\r\n    complete: PropTypes.func.isRequired,\r\n    remove: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default TodoList;","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n\r\nfunction Header()\r\n{\r\n    return (\r\n        \r\n        <header className=\"header\">\r\n            <h2> Todo List </h2>\r\n            <div>\r\n            <Link to=\"/\" className='navbar-link'> Home </Link> | \r\n            <Link to=\"about\" className='navbar-link'> About </Link>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddToDo extends Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state ={\r\n            title: '',\r\n            descript: '',\r\n            complete: false,\r\n        }\r\n        this.HandleNewWork = this.HandleNewWork.bind(this);\r\n        this.AddNewTodo = this.AddNewTodo.bind(this);\r\n    }\r\n\r\n    AddNewTodo(e)\r\n    {\r\n        e.preventDefault();\r\n        if (e.target.title.value!== '')\r\n        {\r\n            this.props.newtodo(this.state);\r\n            this.setState({\r\n                title: '',\r\n                descript: '',\r\n            });\r\n        }\r\n    }\r\n    HandleNewWork = (e) => \r\n    {\r\n        this.setState({\r\n        [e.target.name]: e.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const todo = this.state;\r\n        return (\r\n            <div>\r\n                \r\n            <form onSubmit={(e) => {this.AddNewTodo(e)}} className=\"form-todo\">\r\n                <input type=\"text\" name=\"title\" className=\"todo-title\" value={todo.title}\r\n                onChange={(e) =>{this.HandleNewWork(e)}}\r\n                id=\"title\" placeholder=\"Title work.......\" ></input>\r\n                <input type=\"text\" className=\"todo-descript\" placeholder=\"Description ....\"\r\n                name='descript' id='discript'\r\n                onChange={(e) =>{this.HandleNewWork(e)}}></input>\r\n                <input type=\"submit\" className=\"submit-btn\" value=\"Submit\"></input>\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddToDo.propTypes = {\r\n    newtodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddToDo;\r\n\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>\r\n                 Some thing about me \r\n            </h1>\r\n            <p>\r\n                Somthing i want to talk. i'm just feel alone and confuse\r\n            </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport TodoList from './Components/TodoList';\nimport './App.css';\nimport Header from './Components/Header';\nimport AddTodo from './Components/AddToDo'\nimport {v4 as uuidv4} from 'uuid';\nimport About from './Components/About';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n        todos: [],\n      };\n    this.serverURL = \"http://localhost:8000\";\n    \n        this.CompleteWork = this.CompleteWork.bind(this);\n        this.RemoveWork = this.RemoveWork.bind(this);\n        this.HandleNewWork = this.HandleNewWork.bind(this);\n  }\n\n  async componentDidMount()\n  {\n    try {\n      let response = await Axios.get(`${this.serverURL}/todo-list`);\n      console.log(response.json());\n      \n    } catch (error) {\n      console.log(error);\n    }\n    \n  }\n  //toggle completed base on id of todoItem\n  CompleteWork = async (id) =>\n    {\n      let todos = this.state['todos'];\n      todos = todos.map(todo =>{\n            if (todo._id=== id)\n            {\n                todo.complete = !todo.complete;\n                return todo;\n            }\n            return todo;\n        });\n        this.setState({todos: todos});\n    }\n\n    //handle remove todoItem base on id of todoItem\n    RemoveWork(id)\n    {\n        let todos = this.state['todos'];\n        this.setState({todos: todos.filter(todo=>{\n            return todo._id !== id;\n        })});\n    }\n\n    HandleNewWork(todo)\n    {\n        let newtodo = todo;\n        newtodo._id = uuidv4();\n        this.setState({\n          todos: [...this.state.todos, newtodo],\n        })\n    }\n\n    render()\n    {\n      return (\n        <Router>\n           <div className=\"App container\">\n          <Route exact path=\"/todo-list\" render={(props) => (\n            <React.Fragment>\n              \n                <Header></Header>\n                <TodoList complete={this.CompleteWork} remove={this.RemoveWork} data={this.state}></TodoList>\n                <AddTodo newtodo={this.HandleNewWork}></AddTodo>\n              \n            </React.Fragment>\n          )}></Route>\n          <Route path='/about' component={About}></Route>\n          </div>\n        </Router>\n      );\n    }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}